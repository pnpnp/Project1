package com.lti.controller;

import java.util.HashMap;
import java.util.Map;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

import com.lti.model.Customer;
import com.lti.mvc.exception.CustomException;
import com.lti.mvc.model.Person;
import com.lti.mvc.service.IPersonService;
import com.lti.service.ICustomerService;

@Controller
public class CustomerController {

	private ICustomerService customerService;

	@Autowired
	@Qualifier(value = "customerService")
	public void setPersonService(ICustomerService cs) {
		this.customerService = cs;
	}
	
	@ExceptionHandler(CustomException.class)
	public ModelAndView handlePersonNotFoundException(CustomException ex) {
		Map<String, CustomException> model = new HashMap<String, CustomException>();
		model.put("exception", ex);
		return new ModelAndView("error", model);

	}
	
	@ExceptionHandler(Exception.class)
	public ModelAndView handleException(Exception ex) {
		Map<String, Exception> model = new HashMap<String, Exception>();
		model.put("exception", ex);
		return new ModelAndView("error", model);

	}

	
	@RequestMapping(value = "/customer", method = RequestMethod.GET)
	public String listPersons(Model model) {
		model.addAttribute("customer", new Customer());// model
		model.addAttribute("listCustomer", this.customerService.listCustomer());
		return "person";// view name
	}
	
	@RequestMapping(value = "/customer/add", method = RequestMethod.POST)
	@ExceptionHandler({ CustomException.class })
	public String addPerson(@ModelAttribute("customer") @Valid Customer c, BindingResult result, Model model) {
		if (!result.hasErrors()) {
			if (c.getEmailId() == null) {
				// new person, add it
				this.customerService.addCustomer(c);
			} else {
				// existing person, call update
				this.customerService.updateCustomer(c);
			}
			return "redirect:/customer";
		}
		model.addAttribute("listCustomer", this.customerService.listCustomer());
		return "customer";

	}

	
	
}
